/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../../../index";

export type FileContent =
    /**
     * The content is contained within the filename, so the snippet should
     * reference the filename to upload its contents.
     *  */
    | FernIr.dynamic.FileContent.Filename
    /**
     * The content is the data field itself, so the snippet should
     * reference the raw data to upload its contents.
     *  */
    | FernIr.dynamic.FileContent.Data;

export declare namespace FileContent {
    interface Filename extends _Utils {
        type: "filename";
        value: string;
    }

    interface Data extends _Utils {
        type: "data";
        value: string;
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernIr.dynamic.FileContent._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        filename: (value: string) => _Result;
        data: (value: string) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const FileContent = {
    filename: (value: string): FernIr.dynamic.FileContent.Filename => {
        return {
            value,
            type: "filename",
            _visit <_Result>(
                this: FernIr.dynamic.FileContent.Filename,
                visitor: FernIr.dynamic.FileContent._Visitor<_Result>
            ) {
                return FernIr.dynamic.FileContent._visit(this, visitor);
            },
        };
    },

    data: (value: string): FernIr.dynamic.FileContent.Data => {
        return {
            value,
            type: "data",
            _visit <_Result>(
                this: FernIr.dynamic.FileContent.Data,
                visitor: FernIr.dynamic.FileContent._Visitor<_Result>
            ) {
                return FernIr.dynamic.FileContent._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernIr.dynamic.FileContent,
        visitor: FernIr.dynamic.FileContent._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "filename":
                return visitor.filename(value.value);
            case "data":
                return visitor.data(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
