/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as FernIr from "../../../../../index";

export type RequestBody =
    /**
     * If set, the endpoint must be a bytes endpoint.
     *  */
    | FernIr.dynamic.RequestBody.Bytes
    /**
     * If set, the endpoint must be a multipart/form-data endpoint.
     *  */
    | FernIr.dynamic.RequestBody.Multipart
    /**
     * If set, the endpoint must be a JSON endpoint.
     *  */
    | FernIr.dynamic.RequestBody.Json;

export declare namespace RequestBody {
    interface Bytes extends _Utils {
        type: "bytes";
        value: string;
    }

    interface Multipart extends FernIr.dynamic.MultipartRequestBody, _Utils {
        type: "multipart";
    }

    interface Json extends _Utils {
        type: "json";
        value: unknown;
    }

    interface _Utils {
        _visit: <_Result>(visitor: FernIr.dynamic.RequestBody._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        bytes: (value: string) => _Result;
        multipart: (value: FernIr.dynamic.MultipartRequestBody) => _Result;
        json: (value: unknown) => _Result;
        _other: (value: { type: string }) => _Result;
    }
}

export const RequestBody = {
    bytes: (value: string): FernIr.dynamic.RequestBody.Bytes => {
        return {
            value,
            type: "bytes",
            _visit <_Result>(
                this: FernIr.dynamic.RequestBody.Bytes,
                visitor: FernIr.dynamic.RequestBody._Visitor<_Result>
            ) {
                return FernIr.dynamic.RequestBody._visit(this, visitor);
            },
        };
    },

    multipart: (value: FernIr.dynamic.MultipartRequestBody): FernIr.dynamic.RequestBody.Multipart => {
        return {
            ...value,
            type: "multipart",
            _visit <_Result>(
                this: FernIr.dynamic.RequestBody.Multipart,
                visitor: FernIr.dynamic.RequestBody._Visitor<_Result>
            ) {
                return FernIr.dynamic.RequestBody._visit(this, visitor);
            },
        };
    },

    json: (value?: unknown): FernIr.dynamic.RequestBody.Json => {
        return {
            value,
            type: "json",
            _visit <_Result>(
                this: FernIr.dynamic.RequestBody.Json,
                visitor: FernIr.dynamic.RequestBody._Visitor<_Result>
            ) {
                return FernIr.dynamic.RequestBody._visit(this, visitor);
            },
        };
    },

    _visit: <_Result>(
        value: FernIr.dynamic.RequestBody,
        visitor: FernIr.dynamic.RequestBody._Visitor<_Result>
    ): _Result => {
        switch (value.type) {
            case "bytes":
                return visitor.bytes(value.value);
            case "multipart":
                return visitor.multipart(value);
            case "json":
                return visitor.json(value.value);
            default:
                return visitor._other(value as any);
        }
    },
} as const;
