/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { MultipartRequestBody } from "./MultipartRequestBody";

export const RequestBody: core.serialization.Schema<serializers.dynamic.RequestBody.Raw, FernIr.dynamic.RequestBody> =
    core.serialization
        .union("type", {
            bytes: core.serialization.object({
                value: core.serialization.string(),
            }),
            multipart: MultipartRequestBody,
            json: core.serialization.object({
                value: core.serialization.unknown(),
            }),
        })
        .transform<FernIr.dynamic.RequestBody>({
            transform: (value) => {
                switch (value.type) {
                    case "bytes":
                        return FernIr.dynamic.RequestBody.bytes(value.value);
                    case "multipart":
                        return FernIr.dynamic.RequestBody.multipart(value);
                    case "json":
                        return FernIr.dynamic.RequestBody.json(value.value);
                    default:
                        return value as FernIr.dynamic.RequestBody;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace RequestBody {
    type Raw = RequestBody.Bytes | RequestBody.Multipart | RequestBody.Json;

    interface Bytes {
        type: "bytes";
        value: string;
    }

    interface Multipart extends MultipartRequestBody.Raw {
        type: "multipart";
    }

    interface Json {
        type: "json";
        value?: unknown;
    }
}
