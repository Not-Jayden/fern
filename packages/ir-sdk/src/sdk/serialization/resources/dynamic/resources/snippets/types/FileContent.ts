/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as FernIr from "../../../../../../api/index";
import * as core from "../../../../../../core";

export const FileContent: core.serialization.Schema<serializers.dynamic.FileContent.Raw, FernIr.dynamic.FileContent> =
    core.serialization
        .union("type", {
            filename: core.serialization.object({
                value: core.serialization.string(),
            }),
            data: core.serialization.object({
                value: core.serialization.string(),
            }),
        })
        .transform<FernIr.dynamic.FileContent>({
            transform: (value) => {
                switch (value.type) {
                    case "filename":
                        return FernIr.dynamic.FileContent.filename(value.value);
                    case "data":
                        return FernIr.dynamic.FileContent.data(value.value);
                    default:
                        return value as FernIr.dynamic.FileContent;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace FileContent {
    type Raw = FileContent.Filename | FileContent.Data;

    interface Filename {
        type: "filename";
        value: string;
    }

    interface Data {
        type: "data";
        value: string;
    }
}
